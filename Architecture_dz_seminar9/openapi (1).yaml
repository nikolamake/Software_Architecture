openapi: 3.0.1
info:
  title: Получение информации о клиентах
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1
paths:
  /clients:
    get:
      summary: Метод получения списка клиентов
      tags: 
        - Clients
      operationId: getAllClients
      responses:
        "200":
          description: Успешный ответ со спиcком клиентов
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Clients"
        "default":
          description: Всё остальное
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Метод добавления нового клиента в список
      tags: 
        - Clients
      operationId: createClient
      requestBody:
        required: true
        content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Client" 
      responses:
        "200":
          description: Усшный ответ добавления нового клиента
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Client"
        "default":
          description: Всё остальное
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
  /clients/{idClient}:
    put:
      summary: Метод обновления клиента по id
      tags:
        - Clients
      operationId: UpdateClientId
      parameters:
        - name: idClient
          in: path
          required: true
          description: id Client
          schema:
                $ref: "#/components/schemas/Client"
      responses:
        "200":
          description: Успешный ответ обговлен клиента по id
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Client"
        "default":
          description: Всё остальное
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error" 
    get:
      summary: Метод получения клиента по id
      tags:
        - Clients
      operationId: getClientId
      parameters:
        - name: idClient
          in: path
          required: true
          description: id Client
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ получения клиента по id
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Client"
        "default":
          description: Всё остальное
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"     
    delete:
      summary: Удаление клиента по id
      tags:
        - Clients
      operationId: deleteClientById
      parameters:
        - name: idClient
          in: path
          required: true
          description: id Client
          schema:
            type: string
      responses:
        "200":
          description: Успешное удаление клиента по id
          content:
            adplication/json: {}
        "default":
          description: Всё остальное
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"

  /clouds:
    get:
      summary: Метод получения серверов
      tags: 
        - Clouds
      operationId: getAllClouds
      responses:
        "200":
          description: Успешный ответ 
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Clouds"
        "404":
          description: Сервер не найден
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: ошибка сервера
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Метод добавления сервера
      tags: 
        - Clouds
      operationId: createCloud
      requestBody:
        required: true
        content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Cloud" 
      responses:
        "200":
          description: Успешный ответ
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Cloud"
        "404":
          description: Сервер не найден
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Ошибка сервера
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
  /clouds/{idCloud}:
    put:
        tags:
          - Clouds
        summary: обновление сервера
        description: обновление сервера по id
        operationId: upCloud
        parameters:
        - name: idCloud
          in: path
          required: true
          description: id Cloud
          schema:
            type: string
        requestBody:
          description: обновление сервера 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cloud'
          required: true
        responses:
          '200':
            description: успешно
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Cloud'          

          "404":
            description: не найден
            content:
              adplication/json:
                schema:
                  $ref: "#/components/schemas/Error"
          "500":
            description: Ошибка сервера
            content:
              adplication/json:
                schema:
                  $ref: "#/components/schemas/Error"

        security:
          - cloudstore_auth:
              - write:Clouds
              - read:Clouds
    get:
      summary: Получения сервера по id
      tags:
        - Clouds
      operationId: getCloudId
      parameters:
        - name: idCloud
          in: path
          required: true
          description: id Cloud
          schema:
            type: string
      responses:
        "200":
          description: Успешный ответ получения сервера по id
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Cloud"
        "404":
          description: Сервер не найден
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Удаленный сервер не может обработать запрос
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"  
    delete:
      summary: Удаление сервера по id
      tags:
        - Clouds
      operationId: deleteCloudById
      parameters:
        - name: idCloud
          in: path
          required: true
          description: id Cloud
          schema:
            type: string
      responses:
        "200":
          description: Успешное удаление сервера по id
          content:
            adplication/json: {}
        "404":
          description: Сервер не найден
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Удаоленный сервер не может обработать запрос
          content:
            adplication/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Client:
      type: object
      required:
        - idClient
        - name
      properties:
        idClient:
          type: integer 
          example: 1
          description: Id клиента
        name:
          type: string
          example: Кирилл
          description: Имя клиента
    Clients:
      type: array
      items:
        $ref: "#/components/schemas/Client"
    Error:
      type: object
      required:
        - codeError
        - messageError
      properties:
        codeError:
          type: string
          example: 123f456
          description: Код ошибки
        messageError:
          type: string
          example: error
          description: Сообщение ошибки
    Cloud:
      type: object
      required:
        - OS
        - RAM
        - GPU
        - CPU
        - HDD
        - SSD
        - idClient
      properties:
        OS:
          type: string
          enum:
            - Sol
            - Linux
            - MacOS
        RAM:
          type: integer
          example: 512
          description: оперативная памяти
        GPU:
          type: integer
          example: 512
          description: gpu память
        CPU:
          type: integer
          example: 16
          description: количество ядер 
        HDD:
          type: integer
          example: 512
          description: hdd память
        SSD:
          type: integer
          example: 1024
          description: ssd память
        idClient:
          type: integer
          example: 1
    Clouds:
      type: array
      items:
        $ref: "#/components/schemas/Cloud"
  securitySchemes:
    cloudstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:8080/api/v1/oauth/authorize
          scopes:
            write:Clouds: записать
            read:Clouds: считать сервер